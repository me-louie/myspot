{"ast":null,"code":"import { TOGGLE_LIKE } from \"../actions/feedActions\";\nconst fakePosts = [{\n  id: 1,\n  userID: 1,\n  username: \"BOB_STAR_123\",\n  content: \"Check out this new playlist by ChilledCow!\",\n  title: \"Study Beats\",\n  type: \"playlist\",\n  usersLiked: new Set([2, 3, 4, 5, 6])\n}, {\n  id: 2,\n  userID: 2,\n  username: \"M&M_STAN\",\n  content: \"I Love Eminems new album!\",\n  title: \"Music to Be Murdered By\",\n  type: \"album\",\n  usersLiked: new Set([1, 3, 4, 5])\n}, {\n  id: 3,\n  userID: 3,\n  username: \"Jamster79\",\n  content: \"just made a new playlist to work out too\",\n  title: \"work time 23\",\n  type: \"playlist\",\n  usersLiked: new Set([4, 5, 6])\n}, {\n  id: 4,\n  userID: 4,\n  username: \"ImAUser\",\n  content: \"This is gonna be the summer jam of 2020\",\n  title: \"It's Corona Time - Chumino\",\n  type: \"song\",\n  usersLiked: new Set([2, 3, 5, 6])\n}];\nconst initialState = {\n  activity: true,\n  posts: fakePosts\n};\nexport const feed = (state = initialState, action) => {\n  switch (action.type) {\n    case TOGGLE_LIKE:\n      const newSet = new Set(action.payload.post.usersLiked);\n\n      if (action.payload.post.usersLiked.has(action.payload.userId)) {\n        newSet.delete(action.payload.userId);\n      } else {\n        newSet.add(action.payload.userId);\n      }\n\n      return { ...state,\n        posts: state.posts.map(post => post.id === action.payload.post.id ? { ...post,\n          usersLiked: newSet\n        } : post)\n      };\n\n    default:\n      return state;\n  }\n};\nexport default feed;","map":{"version":3,"sources":["C:/Users/Pearls/Desktop/Summer 2020/CPSC 436i/Project/myspot/src/app/reducers/feed.js"],"names":["TOGGLE_LIKE","fakePosts","id","userID","username","content","title","type","usersLiked","Set","initialState","activity","posts","feed","state","action","newSet","payload","post","has","userId","delete","add","map"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAEA,MAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,MAAM,EAAE,CAFV;AAGEC,EAAAA,QAAQ,EAAE,cAHZ;AAIEC,EAAAA,OAAO,EAAE,4CAJX;AAKEC,EAAAA,KAAK,EAAE,aALT;AAMEC,EAAAA,IAAI,EAAE,UANR;AAOEC,EAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAR;AAPd,CADgB,EAUhB;AACEP,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,MAAM,EAAE,CAFV;AAGEC,EAAAA,QAAQ,EAAE,UAHZ;AAIEC,EAAAA,OAAO,EAAE,2BAJX;AAKEC,EAAAA,KAAK,EAAE,yBALT;AAMEC,EAAAA,IAAI,EAAE,OANR;AAOEC,EAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAR;AAPd,CAVgB,EAmBhB;AACEP,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,MAAM,EAAE,CAFV;AAGEC,EAAAA,QAAQ,EAAE,WAHZ;AAIEC,EAAAA,OAAO,EAAE,0CAJX;AAKEC,EAAAA,KAAK,EAAE,cALT;AAMEC,EAAAA,IAAI,EAAE,UANR;AAOEC,EAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAR;AAPd,CAnBgB,EA4BhB;AACEP,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,MAAM,EAAE,CAFV;AAGEC,EAAAA,QAAQ,EAAE,SAHZ;AAIEC,EAAAA,OAAO,EAAE,yCAJX;AAKEC,EAAAA,KAAK,EAAE,4BALT;AAMEC,EAAAA,IAAI,EAAE,MANR;AAOEC,EAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAR;AAPd,CA5BgB,CAAlB;AAuCA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,KAAK,EAAEX;AAFY,CAArB;AAKA,OAAO,MAAMY,IAAI,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACR,IAAf;AACE,SAAKP,WAAL;AACE,YAAMgB,MAAM,GAAG,IAAIP,GAAJ,CAAQM,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBV,UAA5B,CAAf;;AACA,UAAIO,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBV,UAApB,CAA+BW,GAA/B,CAAmCJ,MAAM,CAACE,OAAP,CAAeG,MAAlD,CAAJ,EAA+D;AAC7DJ,QAAAA,MAAM,CAACK,MAAP,CAAcN,MAAM,CAACE,OAAP,CAAeG,MAA7B;AACD,OAFD,MAEO;AACLJ,QAAAA,MAAM,CAACM,GAAP,CAAWP,MAAM,CAACE,OAAP,CAAeG,MAA1B;AACD;;AACD,aAAO,EACL,GAAGN,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYW,GAAZ,CAAiBL,IAAD,IACrBA,IAAI,CAAChB,EAAL,KAAYa,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBhB,EAAhC,GACI,EAAE,GAAGgB,IAAL;AAAWV,UAAAA,UAAU,EAAEQ;AAAvB,SADJ,GAEIE,IAHC;AAFF,OAAP;;AAQF;AACE,aAAOJ,KAAP;AAjBJ;AAmBD,CApBM;AAsBP,eAAeD,IAAf","sourcesContent":["import { TOGGLE_LIKE } from \"../actions/feedActions\";\r\n\r\nconst fakePosts = [\r\n  {\r\n    id: 1,\r\n    userID: 1,\r\n    username: \"BOB_STAR_123\",\r\n    content: \"Check out this new playlist by ChilledCow!\",\r\n    title: \"Study Beats\",\r\n    type: \"playlist\",\r\n    usersLiked: new Set([2, 3, 4, 5, 6]),\r\n  },\r\n  {\r\n    id: 2,\r\n    userID: 2,\r\n    username: \"M&M_STAN\",\r\n    content: \"I Love Eminems new album!\",\r\n    title: \"Music to Be Murdered By\",\r\n    type: \"album\",\r\n    usersLiked: new Set([1, 3, 4, 5]),\r\n  },\r\n  {\r\n    id: 3,\r\n    userID: 3,\r\n    username: \"Jamster79\",\r\n    content: \"just made a new playlist to work out too\",\r\n    title: \"work time 23\",\r\n    type: \"playlist\",\r\n    usersLiked: new Set([4, 5, 6]),\r\n  },\r\n  {\r\n    id: 4,\r\n    userID: 4,\r\n    username: \"ImAUser\",\r\n    content: \"This is gonna be the summer jam of 2020\",\r\n    title: \"It's Corona Time - Chumino\",\r\n    type: \"song\",\r\n    usersLiked: new Set([2, 3, 5, 6]),\r\n  },\r\n];\r\n\r\nconst initialState = {\r\n  activity: true,\r\n  posts: fakePosts,\r\n};\r\n\r\nexport const feed = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_LIKE:\r\n      const newSet = new Set(action.payload.post.usersLiked);\r\n      if (action.payload.post.usersLiked.has(action.payload.userId)) {\r\n        newSet.delete(action.payload.userId);\r\n      } else {\r\n        newSet.add(action.payload.userId);\r\n      }\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((post) =>\r\n          post.id === action.payload.post.id\r\n            ? { ...post, usersLiked: newSet }\r\n            : post\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default feed;\r\n"]},"metadata":{},"sourceType":"module"}